# -*- coding: utf-8 -*-
"""stats418-main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BsHX-mvwMI1SqFZ4PfAQQIDB76acVMrJ
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# data = pd.read_csv("https://raw.githubusercontent.com/positivee27/stats418-Final-Project/master/scripts/Moviedata.csv")
data = pd.read_csv('https://raw.githubusercontent.com/positivee27/stats418-Final-Project/master/scripts/Moviedata.csv', error_bad_lines=False)
data.head()

data.info()

data["imdb"].fillna(data["imdb"].median(), inplace=True)
data["votes"].fillna(data["votes"].median(), inplace=True)

import matplotlib.pyplot as plt

fig,ax = plt.subplots (figsize = (8,5) , dpi = 80)
ax.scatter (data.index,data["imdb"],color='r')
ax.set_xlabel("instance",fontsize=13)
ax.set_ylabel("IMDb score",fontsize=13)
ax.set_title("The scatterplot of IMDb score")

import seaborn as sns

distplot = sns.distplot(data['votes'])
distplot.set_ylabel("frequency",fontsize=13)
distplot.set_title("The votes distribution")

data['votes'] = np.log1p(data['votes'])
distplot = sns.distplot(data['votes'])
distplot.set_ylabel("frequency",fontsize=13)
distplot.set_title("The votes distribution after transformation")

type(data)

y =  data["votes"]

X = data.iloc[:,0:2]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=2)

# Create linear regression object
regr = LinearRegression()

# Train the model using the training sets
regr.fit(X_train, y_train)

# Make predictions using the testing set
y_pred = regr.predict(X_test)

# The coefficients
print('Coefficients: \n', regr.coef_)
print("F")
# The mean squared error
# print("Mean squared error: %.2f"
#       % mean_squared_error(y_test, y_pred))
print("Mean squared error: "
      , mean_squared_error(y_test, y_pred))

# Explained variance score: 1 is perfect prediction
print('Variance score: %.2f' % r2_score(y_test, y_pred))

# Plot outputs
# plt.scatter(X_test, y_test,  color='black')
# plt.plot(X_test, y_pred, color='blue', linewidth=3)
# plt.scatter(y_predict, y_test, color='black')
plt.scatter(y_pred, y_test, color='black')
plt.xlabel("y_pred")
plt.ylabel("y_test")
# plt.title("scatter plot of  and y")
# plt.scatter(x_test,y_test)


plt.xticks(())
plt.yticks(())

plt.show()